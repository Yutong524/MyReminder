// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Moment {
  id                String           @id @default(cuid())
  title             String
  slug              String           @unique
  targetUtc         DateTime
  timeZone          String
  visibility        Visibility       @default(PUBLIC)
  theme             String           @default("default")
  ownerEmail        String?
  userId            String?
  user              User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  passcodeHash      String?
  slackWebhookUrl   String?
  smsPhone          String? // E.164 e.g. +14155551234
  discordWebhookUrl String? // https://discord.com/api/webhooks/{id}/{token}
  bgmUrl            String?
  bgmLoop           Boolean          @default(true)
  bgmVolume         Int              @default(50) // 0-100
  endSoundKey       String?
  endSoundUrl       String?
  endSoundVolume    Int              @default(80) // 0-100
  views             Int              @default(0)
  uniques           Int              @default(0)
  viewDays          ViewDay[]
  refStats          ReferrerStat[]
  uniqueSeens       UniqueSeen[]
  cheerCount        Int              @default(0)
  notifyOnCheer     Boolean          @default(false)
  notifyOnNote      Boolean          @default(false)
  cheers            Cheer[]
  guestbook         GuestbookEntry[]
  rrule             String?
  rtime             String?
  currentStreak     Int              @default(0)
  maxStreak         Int              @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  rules             ReminderRule[]
  jobs              ReminderJob[]
  logs              DeliveryLog[]
  skips             RecurrenceSkip[]

  @@index([visibility])
  @@index([userId, createdAt])
  @@index([rrule])
}

model RecurrenceSkip {
  id            String   @id @default(cuid())
  momentId      String
  moment        Moment   @relation(fields: [momentId], references: [id], onDelete: Cascade)
  occurrenceUtc DateTime
  reason        String?
  createdAt     DateTime @default(now())

  @@index([momentId, occurrenceUtc])
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  moments       Moment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Channel {
  EMAIL
  SLACK
  SMS
  DISCORD
}

model ReminderRule {
  id            String        @id @default(cuid())
  momentId      String
  moment        Moment        @relation(fields: [momentId], references: [id], onDelete: Cascade)
  channel       Channel       @default(EMAIL)
  offsetMinutes Int
  active        Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  jobs          ReminderJob[]
}

enum JobStatus {
  PENDING
  QUEUED
  SENT
  DELIVERED
  FAILED
  CANCELED
  SKIPPED
}

model ReminderJob {
  id                      String        @id @default(cuid())
  momentId                String
  ruleId                  String
  moment                  Moment        @relation(fields: [momentId], references: [id], onDelete: Cascade)
  rule                    ReminderRule  @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  scheduledAt             DateTime
  channel                 Channel       @default(EMAIL)
  status                  JobStatus     @default(PENDING)
  attempts                Int           @default(0)
  lastError               String?
  recipientEmail          String?
  recipientSlackWebhook   String?
  recipientDiscordWebhook String?
  recipientPhone          String?
  subject                 String
  body                    String
  providerMessageId       String?
  sentAt                  DateTime?
  deliveredAt             DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  logs                    DeliveryLog[]

  @@index([status, scheduledAt])
  @@index([channel, status, scheduledAt])
}

model DeliveryLog {
  id        String      @id @default(cuid())
  momentId  String
  jobId     String
  moment    Moment      @relation(fields: [momentId], references: [id], onDelete: Cascade)
  job       ReminderJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  status    JobStatus
  message   String?
  createdAt DateTime    @default(now())
}

model Cheer {
  id        String   @id @default(cuid())
  momentId  String
  moment    Moment   @relation(fields: [momentId], references: [id], onDelete: Cascade)
  ipHash    String
  createdAt DateTime @default(now())

  @@index([momentId, ipHash, createdAt])
}

model GuestbookEntry {
  id        String   @id @default(cuid())
  momentId  String
  moment    Moment   @relation(fields: [momentId], references: [id], onDelete: Cascade)
  name      String?
  message   String
  ipHash    String?
  notified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([momentId, createdAt])
}

model ViewDay {
  id        String   @id @default(cuid())
  momentId  String
  moment    Moment   @relation(fields: [momentId], references: [id], onDelete: Cascade)
  day       DateTime
  views     Int      @default(0)
  uniques   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([momentId, day], name: "momentId_day")
  @@index([momentId, day])
}

model ReferrerStat {
  id        String   @id @default(cuid())
  momentId  String
  moment    Moment   @relation(fields: [momentId], references: [id], onDelete: Cascade)
  host      String
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([momentId, host], name: "momentId_host")
  @@index([momentId, count])
}

model UniqueSeen {
  id        String   @id @default(cuid())
  momentId  String
  moment    Moment   @relation(fields: [momentId], references: [id], onDelete: Cascade)
  day       DateTime
  ipHash    String
  createdAt DateTime @default(now())

  @@unique([momentId, day, ipHash])
  @@index([momentId, day])
}
